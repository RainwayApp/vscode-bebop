{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Bebop",
	"scopeName": "source.bop",
	"fileTypes": [
		"bop"
	],
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#attributeSection"
		},
		{
			"include": "#message"
		},
		{
			"include": "#union"
		},
		{
			"include": "#struct"
		},
		{
			"include": "#enum"
		},
		{
			"include": "#const"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.block.bop",
					"begin": "/\\*",
					"end": "\\*/"
				},
				{
					"name": "comment.line.double-slash.bop",
					"begin": "//",
					"end": "$\\n?"
				}
			]
		},
		"attributeSection": {
			"begin": "(\\[)(opcode|deprecated)?(\\:)?",
			"beginCaptures": {
				"1": {
					"name": "punctuation.annotation.start.bop"
				},
				"2": {
					"name": "keyword.other.attribute-specifier.bop"
				},
				"3": {
					"name": "punctuation.separator.colon.bop"
				}
			},
			"end": "(\\])",
			"endCaptures": {
				"1": {
					"name": "punctuation.annotation.end.bop"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#attribute"
				}
			]
		},
		"attribute": {
			"patterns": [
				{
					"include": "#attributeArguments"
				}
			]
		},
		"attributeArguments": {
			"begin": "(\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.paren.open.bop"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.paren.close.bop"
				}
			},
			"patterns": [
				{
					"include": "#number"
				},
				{
					"include": "#string"
				}
			]
		},
		"message": {
			"name": "meta.message.bop",
			"begin": "(message)\\s+([A-Za-z][A-Za-z0-9_.]*)\\s*(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.bop"
				},
				"2": {
					"name": "entity.name.type.message.bop"
				},
				"3": {
					"name": "punctuation.start.block.bop"
				}
			},
			"end": "(\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.block.end.bop"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#field"
				}
			]
		},
		"struct": {
			"name": "meta.struct.bop",
			"begin": "(?:(readonly)\\s+)?(struct)\\s+([A-Za-z][A-Za-z0-9_]*)\\s*(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.bop"
				},
				"2": {
					"name": "keyword.other.bop"
				},
				"3": {
					"name": "entity.name.type.struct.bop"
				},
				"4": {
					"name": "punctuation.start.block.bop"
				}
			},
			"end": "(\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.block.end.bop"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#field"
				}
			]
		},
		"union": {
			"name": "meta.union.bop",
			"begin": "(union)\\s+([A-Za-z][A-Za-z0-9_.]*)\\s*(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.bop"
				},
				"2": {
					"name": "entity.name.type.union.bop"
				},
				"3": {
					"name": "punctuation.start.block.bop"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#union_discriminator"
				},
				{
					"include": "#struct"
				},
				{
					"include": "#message"
				},
				{
					"include": "#union"
				},
				{
					"match": ";",
					"name": "punctuation.terminator.bop"
				}
			],
			"end": "(\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.block.end.bop"
				}
			}
		},
		"union_discriminator": {
			"name": "meta.union_discriminator.bop",
			"begin": "(\\d+)",
			"beginCaptures": {
				"1":{
					"name": "constant.numeric.bop"
				}
			},
			"end": "(->)",
			"endCaptures": {
				"1": {
					"name": "punctuation.arrow.bop"
				}
			}
		},
		"field": {
			"name": "meta.field.bop",
			"begin": "(?=\\w)",
			"end": "(\\w+)\\s*(;)",
			"endCaptures": {
				"1": {
					"name": "variable.other.bop"
				},
				"2": {
					"name": "punctuation.terminator.bop"
				}
			},
			"patterns": [
				{
					"include": "#builtin_type"
				},
				{
					"include": "#ident"
				},
				{
					"include": "#arrow"
				},
				{
					"include": "#number"
				},
				{
					"include": "#type_punctuation"
				}
			]
		},
		"enum": {
			"name": "meta.enum.bop",
			"begin": "(enum)\\s+([A-Za-z][A-Za-z0-9_]*)\\s*(\\{)",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.bop"
				},
				"2": {
					"name": "entity.name.type.bop"
				},
				"3": {
					"name": "punctuation.block.start.bop"
				}
			},
			"end": "(\\})",
			"endCaptures": {
				"1": {
					"name": "punctuation.block.end.bop"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"begin": "([A-Za-z][A-Za-z0-9_]*)\\s*(=)\\s*(0[xX][0-9a-fA-F]+|[0-9]+)",
					"beginCaptures": {
						"1": {
							"name": "variable.other.bop"
						},
						"2": {
							"name": "punctuation.equals.bop"
						},
						"3": {
							"name": "constant.numeric.bop"
						}
					},
					"end": "(;)",
					"endCaptures": {
						"1": {
							"name": "punctuation.terminator.bop"
						}
					},		
					"patterns": []
				}
			]
		},
		"const": {
			"name": "meta.const.bop",
			"begin": "(const)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.bop"
				}
			},
			"end": "(;)",
			"endCaptures": {
				"1": {
					"name": "punctuation.terminator.bop"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#builtin_type"
				},
				{
					"match": "="
				},
				{
					"include": "#datetime"
				},
				{
					"include": "#num_const"
				},
				{
					"match": "(true|false)",
					"name": "constant.language.boolean.bop"
				},
				{
					"include": "#string"
				},
				{
					"include": "#ident"
				}
			]
		},
		"ident": {
			"match": "\\b[A-Za-z][A-Za-z0-9_]*\\b",
			"name": "entity.name.type.bop"
		},
		"builtin_type": {
			"match": "\\b(bool|byte|uint8|uint16|int16|uint32|int32|uint64|int64|float32|float64|string|guid|date|array|map)\\b",
			"name": "storage.type.bop"
		},
		"string": {
			"name": "string.quoted.double.bop",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"match": "\"([^\"]|\\\")*\"",
					"name": "string.quoted.double.bop"
				}
			]
		},
		"num_const": {
			"name": "constant.numeric.bop",
			"match": "-?\\b(inf|nan|0[xX][0-9a-fA-F]+|[0-9]+)(\\.?[e0-9]*)\\b"
		},
		"number": {
			"name": "constant.numeric.bop",
			"match": "\\b(0[xX][0-9a-fA-F]+|[0-9]+)\\b"
		},
		"arrow": {
			"name": "punctuation.arrow.bop",
			"match": "->"
		},
		"type_punctuation": {
			"name": "punctuation.type.bop",
			"match": "\\[|\\]|,"
		},
		"datetime": {
			"name": "constant.language",
			"match": "\\b[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}Z\\b"
		}
	}
}
